// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Añadir enum para roles de usuario
enum UserRole {
  USER
  ADMIN
  CREATOR
}

model User {
  id                   String             @id @default(cuid())
  username             String             @unique
  email                String             @unique
  bio                  String?
  role                 UserRole
  password             String
  profileImage         String?
  petName              String
  petType              String
  petImage             String?
  isPublicProfile      Boolean            @default(true)
  location             String?
  latitude             Float?
  longitude            Float?
  isEmailConfirmed     Boolean            @default(false)
  confirmationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  refreshToken         String?
  refreshTokenExpiry   DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  posts                Post[]
  comments             Comment[]
  postLikes            PostLike[]
  followers            Follows[]          @relation("following")
  following            Follows[]          @relation("follower")
  pets                 Pet[]
  petFollows           PetFollows[]
  pushSubscriptions    PushSubscription[]
  taggedInPosts        TaggedUser[]
  pages                Page[]
  patreonMembership    PatreonMembership?
  isPremium            Boolean            @default(false)
  premiumSince         DateTime?
  premiumUntil         DateTime?
  donationIntents      DonationIntent[]
  badges               UserBadge[]
  createdEvents Event[]
  attendingEvents Event[] @relation("EventAttendees")
}

model Pet {
  id                          String       @id @default(cuid())
  name                        String
  type                        String
  breed                       String?
  age                         Int?
  image                       String?
  description                 String?
  user                        User         @relation(fields: [userId], references: [id])
  userId                      String
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime     @updatedAt
  followers                   PetFollows[]
  vaccinationRemindersEnabled Boolean      @default(false)

  // New fields for Digital Health Card
  healthCard HealthCard?

  // Updated Passport relation
  passport Passport?

  // Relaciones para el sistema de publicaciones
  posts         Post[]
  taggedInPosts TaggedPet[]
}

model HealthCard {
  id               String          @id @default(cuid())
  petId            String          @unique
  pet              Pet             @relation(fields: [petId], references: [id])
  veterinarianName String
  clinicName       String
  clinicAddress    String
  clinicPhone      String
  clinicEmail      String
  lastCheckupDate  DateTime?
  nextCheckupDate  DateTime?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  vaccinations     Vaccination[]
  medications      Medication[]
  medicalHistory   MedicalRecord[]
}

model Vaccination {
  id               String     @id @default(cuid())
  name             String
  date             DateTime
  nextDueDate      DateTime?
  expiryDate       DateTime?
  batchNumber      String?
  veterinarianName String?
  notes            String?
  healthCardId     String
  healthCard       HealthCard @relation(fields: [healthCardId], references: [id], onDelete: Cascade)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Medication {
  id           String     @id @default(cuid())
  name         String
  dosage       String
  frequency    String
  startDate    DateTime
  endDate      DateTime?
  notes        String?
  healthCardId String
  healthCard   HealthCard @relation(fields: [healthCardId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model MedicalRecord {
  id               String     @id @default(cuid())
  date             DateTime
  description      String
  diagnosis        String?
  treatment        String?
  veterinarianName String?
  notes            String?
  healthCardId     String
  healthCard       HealthCard @relation(fields: [healthCardId], references: [id], onDelete: Cascade)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Passport {
  id                  String    @id @default(cuid())
  pet                 Pet       @relation(fields: [petId], references: [id])
  petId               String    @unique
  passportNumber      String
  issuedDate          DateTime
  expiryDate          DateTime?
  issuingCountry      String
  microchipNumber     String?
  species             String
  breed               String
  sex                 String
  dateOfBirth         DateTime
  transponderCode     String?
  transponderReadDate DateTime?
  transponderLocation String?
  tattooCode          String?
  tattooDate          DateTime?
  tattooLocation      String?
  veterinarianName    String
  clinicAddress       String
  clinicPostalCode    String
  clinicCity          String
  clinicCountry       String
  clinicPhone         String
  clinicEmail         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// Sistema de publicaciones actualizado
model Post {
  id          String       @id @default(cuid())
  content     String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  petId       String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet         Pet?         @relation(fields: [petId], references: [id], onDelete: SetNull)
  likes       PostLike[]
  comments    Comment[]
  hashtags    Hashtag[]    @relation("PostToHashtag")
  taggedUsers TaggedUser[]
  taggedPets  TaggedPet[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLike {
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]   @relation("PostToHashtag")
}

model TaggedUser {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model TaggedPet {
  id        String   @id @default(cuid())
  petId     String
  postId    String
  createdAt DateTime @default(now())
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model PetFollows {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String
  createdAt DateTime @default(now())

  @@id([userId, petId])
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  subscription String   @db.Text // JSON string de la suscripción push
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Añadir modelo para páginas estáticas
model Page {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  metaTitle       String?
  metaDescription String?  @db.Text
  isPublished     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  authorId        String
  author          User     @relation(fields: [authorId], references: [id])
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  bio       String   @db.Text
  image     String?
  order     Int      @default(0)
  twitter   String?
  instagram String?
  facebook  String?
  linkedin  String?
  github    String?
  isFounder Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatreonMembership {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  patreonId      String // ID del miembro en Patreon
  status         String // active_patron, declined_patron, former_patron
  tierName       String? // Nombre del nivel de membresía
  amountCents    Int // Cantidad en centavos
  lastChargeDate DateTime? // Fecha del último cargo
  createdAt      DateTime  @default(now())
  lastUpdated    DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model DonationIntent {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int
  source      String // "patreon", "paypal", etc.
  status      String // "pending", "completed", "expired", "cancelled"
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  completedAt DateTime?

  @@index([userId])
  @@index([status])
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedAt DateTime @default(now())

  @@index([userId])
  @@index([badgeId])
}


model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  location    String
  latitude    Float?
  longitude   Float?
  date        DateTime
  endDate     DateTime?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  attendees   User[]    @relation("EventAttendees")
  isPublished Boolean   @default(false)
  
  @@index([userId])
  @@index([date])
}

model Service {
  id           String    @id @default(cuid())
  title        String
  description  String
  address      String?
  latitude     Float?
  longitude    Float?
  imageUrl     String?
  openingHours String?
  phone        String?
  website      String?
  category     String    // "pet-friendly", "shops", "vets"
  subCategory  String?   // Para categorías específicas dentro de cada tipo
  tags         String[]  // Etiquetas para filtrado
  rating       Float?    // Calificación promedio
  featured     Boolean   @default(false)
  isActive     Boolean   @default(true)
  isOnline     Boolean   @default(false) // Para tiendas online
  createdBy    String    // ID del usuario administrador que lo creó
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  metadata     Json?     // Para almacenar datos adicionales como bookingUrl

  @@index([category])
  @@index([createdBy])
}


model VisitorLog {
  id          String    @id @default(cuid())
  visitorId   String
  path        String
  referrer    String?
  userAgent   String?
  deviceType  String?
  city        String?
  country     String?
  latitude    Float?
  longitude   Float?
  date        String    // Formato YYYY-MM-DD para facilitar agrupaciones
  createdAt   DateTime  @default(now())

  @@index([visitorId])
  @@index([date])
  @@index([country])
  @@index([deviceType])
}